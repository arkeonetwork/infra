apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMap }}
data:
  entrypoint.sh: |
    #!/bin/sh

    # exit script on any error
    set -e

    # Set Heimdall Home Directory
    HEIMDALL_HOME={{ .Values.volumeMount.heimdall.path }}

    # If HEIMDALL_RPC container and config file is missing, we need to init and configure it
    if [ ! -n "$REST_SERVER" ] && [ ! -f "$HEIMDALL_HOME/config/config.toml" ]; then
      echo "setting up initial configurations"
      heimdalld init --home "$HEIMDALL_HOME"
      cd $HEIMDALL_HOME/config

      #config.toml
      # SEEDS
      sed -i "s#^seeds.*#seeds = \"${SEEDS}\"#" config.toml

      # heimdall-config.toml
      # BOR
      echo "setting up bor rpc"
      sed -i "s#^bor_rpc_url.*#bor_rpc_url = \"${BOR_RPC_URL}\"#" heimdall-config.toml
      # ETH
      echo "setting up eth rpc"
      sed -i "s#^eth_rpc_url.*#eth_rpc_url = \"${ETH_RPC_URL}\"#" heimdall-config.toml

      echo "removing autogenerated genesis file"
      rm genesis.json

      echo "downloading correct genesis file"
      wget -O genesis.json https://raw.githubusercontent.com/maticnetwork/heimdall/master/builder/files/genesis-mainnet-v1.json
    fi

    # If heimdalld container and we need to bootstrap on first run then download the snapshot
    if [ ! -n "$REST_SERVER" ] && [ "${BOOTSTRAP}" == 1 ] && [ -n "${SNAPSHOT_URL}" ] && [ ! -f "$HEIMDALL_HOME/snapshot" ]; then
      echo "downloading snapshot from ${SNAPSHOT_URL}"
      apk add curl jq zstd aria2
      mkdir -p ${HEIMDALL_HOME}/extract && cd ${HEIMDALL_HOME}/extract

      # download compiled incremental snapshot files list
      aria2c -x6 -s6 "${SNAPSHOT_URL}"

      # download all incremental files, includes automatic checksum verification per increment
      aria2c -x6 -s6 -c --auto-file-renaming=false --max-tries=100 --file-allocation=none -i heimdall-mainnet-incremental-compiled-files.txt

      # marker to indicate that the snapshot process has been completed
      touch ../snapshot
    fi

    exec heimdalld start --home=${HEIMDALL_HOME} --p2p.laddr=tcp://0.0.0.0:26656 --rpc.laddr=tcp://0.0.0.0:26657 --rest-server

  bor-entrypoint.sh: |
    #!/bin/sh

    # exit script on any error
    set -e

    # Set Bor Home Directory
    BOR_HOME={{ .Values.volumeMount.bor.path }}

    apk add zstd aria2 curl jq


    echo "setting up initial configurations"
    cd ${BOR_HOME}
    echo "downloading launch genesis file"
    wget -O genesis.json https://raw.githubusercontent.com/maticnetwork/bor/master/builder/files/genesis-mainnet-v1.json


    if [ ! -f "${BOR_HOME}/config.toml" ]; then
      echo "setting up config.toml"
      cd ${BOR_HOME}
      bor dumpconfig | tee config.toml
      sed -i "s#^identity.*#identity = \"bornode\"#" config.toml
      sed -i "s#^datadir.*#datadir = \"${BOR_HOME}\"#" config.toml
      sed -i '/p2p\.discovery/,/\[/ s|bootnodes = \[\]|bootnodes = ['"${BOOTNODES}"']|g' config.toml
      sed -i 's|url.*|url = '"${HEIMDALL_REST}"'|g' config.toml
      sed -i '/jsonrpc\.http/,/\[/ s/enabled = false/enabled = true/g; s/host = "localhost"/host = "0.0.0.0"/g' config.toml
    fi

    cat ${BOR_HOME}/config.toml

    if [ "${BOOTSTRAP}" == "1" ] && [ -n "${SNAPSHOT_URL}" ] && [ ! -f "${BOR_HOME}/snapshot" ]; then
      echo "downloading snapshot from ${SNAPSHOT_URL}"
      apk add zstd aria2 curl jq
      mkdir -p ${BOR_HOME}/bor/chaindata && cd ${BOR_HOME}/bor/chaindata

      # download compiled incremental snapshot files list
      aria2c -x6 -s6 "${SNAPSHOT_URL}"

      # download all incremental files, includes automatic checksum verification per increment
      aria2c -x6 -s6 -c --auto-file-renaming=false --max-tries=100 --file-allocation=none -i bor-mainnet-incremental-compiled-files.txt

      # marker to indicate that the snapshot process has been completed
      touch ../../snapshot
    fi

    # check if heimdall is synced before starting bor
    READY=$(curl -s "${HEIMDALL_RPC}" | jq '.result.sync_info.catching_up')
    while [[ "${READY}" != "false" ]]; do
      echo "Waiting for HEIMDALL_RPC to catch up."
      sleep 30
      READY=$(curl -s "${HEIMDALL_RPC}" | jq '.result.sync_info.catching_up')
    done

    exec bor server --config ${BOR_HOME}/config.toml